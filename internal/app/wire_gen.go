// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package app

import (
	"github.com/go-playground/validator/v10"
	"net/http"
	"online-shop-api/internal/controller"
	"online-shop-api/internal/middleware"
	"online-shop-api/internal/repository"
	"online-shop-api/internal/service"
	"online-shop-api/scheduler"
)

// Injectors from injector.go:

func InitializedServer() *http.Server {
	categoryRepository := repository.NewCategoryRepository()
	db := NewDB()
	v := ProvideValidatorOptions()
	validate := validator.New(v...)
	categoryService := service.NewCategoryService(categoryRepository, db, validate)
	categoryController := controller.NewCategoryController(categoryService)
	productRepository := repository.NewProductRepository()
	productService := service.NewProductService(productRepository, categoryService, db, validate)
	productController := controller.NewProductController(productService)
	userRepository := repository.NewUserRepository()
	customerRepository := repository.NewCustomerRepository()
	customerService := service.NewCustomerService(customerRepository, db, validate)
	authService := service.NewAuthService(userRepository, customerService, db, validate)
	authController := controller.NewAuthController(authService)
	customerController := controller.NewCustomerController(customerService)
	orderRepository := repository.NewOrderRepository()
	orderService := service.NewOrderService(orderRepository, customerService, productService, db, validate)
	schedulerScheduler := scheduler.NewScheduler(orderService)
	orderController := controller.NewOrderController(orderService, schedulerScheduler)
	router := NewRouter(categoryController, productController, authController, customerController, orderController)
	authMiddleware := middleware.NewAuthMiddleware(router)
	server := NewServer(authMiddleware)
	return server
}

// injector.go:

func ProvideValidatorOptions() []validator.Option {
	return []validator.Option{}
}
